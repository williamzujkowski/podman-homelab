---
# Observability stack deployment playbook for Pi cluster
- name: Deploy Node Exporter on all Pi nodes
  hosts: pis
  gather_facts: yes
  become: yes
  serial: "{{ serial | default(1) }}"
  
  roles:
    - node_exporter

- name: Deploy Promtail on all Pi nodes 
  hosts: pis
  gather_facts: yes
  become: yes
  serial: "{{ serial | default(1) }}"
  
  roles:
    - promtail

- name: Deploy monitoring stack on monitoring nodes
  hosts: monitoring_nodes
  gather_facts: yes
  become: yes
  serial: "{{ serial | default(1) }}"

  pre_tasks:
    - name: Check Podman deployment (for Loki container)
      ansible.builtin.stat:
        path: /etc/ansible/facts.d/podman.fact
      register: podman_check

    - name: Fail if Podman not deployed
      ansible.builtin.fail:
        msg: "Podman not deployed. Run 20-podman.yml first."
      when: not podman_check.stat.exists

    - name: Verify time synchronization (CLAUDE.md compliance)
      ansible.builtin.shell: |
        chronyc tracking | grep -E "Reference time|Stratum|System time" || exit 1
        # Check drift and stratum requirements
        chronyc tracking | awk '/System time/ {if ($4 > 0.1) exit 1}'
        chronyc tracking | awk '/Stratum/ {if ($3 > 3) exit 1}'
      changed_when: false
      failed_when: false
      register: time_check
    
    - name: Fail if time synchronization requirements not met
      ansible.builtin.fail:
        msg: "Time synchronization requirements not met. Drift must be ≤100ms, stratum ≤3."
      when: time_check.rc != 0

  roles:
    - monitoring

  tasks:
    - name: Verify Prometheus is accessible
      ansible.builtin.uri:
        url: "http://localhost:9090/api/v1/status/config"
        method: GET
        status_code: 200
      register: prometheus_check
      retries: 3
      delay: 10
      until: prometheus_check.status == 200

    - name: Verify Grafana is accessible
      ansible.builtin.uri:
        url: "http://localhost:3000/api/health"
        method: GET
        status_code: 200
      register: grafana_check
      retries: 3
      delay: 10
      until: grafana_check.status == 200

    - name: Verify Loki is accessible
      ansible.builtin.uri:
        url: "http://localhost:3100/ready"
        method: GET
        status_code: 200
      register: loki_check
      retries: 3
      delay: 10
      until: loki_check.status == 200

    - name: Configure Prometheus data sources in Grafana
      ansible.builtin.uri:
        url: "http://localhost:3000/api/datasources"
        method: POST
        user: "{{ grafana_security.admin_user }}"
        password: "{{ grafana_security.admin_password }}"
        force_basic_auth: yes
        body_format: json
        body:
          name: "Prometheus"
          type: "prometheus"
          url: "http://localhost:9090"
          access: "proxy"
          isDefault: true
        status_code: [200, 409]  # 409 if already exists
      register: grafana_ds_result
      failed_when: 
        - grafana_ds_result.status not in [200, 409]
        - '"already exists" not in (grafana_ds_result.json.message | default(""))'

  post_tasks:
    - name: Wait for all monitoring services to be healthy
      ansible.builtin.wait_for:
        port: "{{ item }}"
        host: "{{ ansible_host }}"
        timeout: 60
        state: started
      loop:
        - 9090  # Prometheus
        - 3000  # Grafana
        - 3100  # Loki

    - name: Display monitoring service information
      ansible.builtin.debug:
        msg: |
          Monitoring stack deployed successfully on {{ inventory_hostname }}!

          Services:
          - Prometheus: http://{{ ansible_host }}:9090
          - Grafana: http://{{ ansible_host }}:3000 (admin/admin)
          - Loki: http://{{ ansible_host }}:3100

          Deployment Details:
          - Prometheus: Native systemd service with {{ prometheus_retention_time }} retention
          - Grafana: Native systemd service with provisioned datasources
          - Loki: Podman container with {{ loki_retention_period }} retention
          
          Node Exporters deployed on all Pi nodes:
          {% for host in groups['pis'] -%}
          - http://{{ hostvars[host]['ansible_host'] }}:9100/metrics
          {% endfor %}
      run_once: true
