#!/bin/bash
# Authentik Health Check Script

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

echo "Checking Authentik health status..."

# Check server health
echo -n "Server API: "
if curl -sf http://localhost:{{ authentik_http_port }}/api/v3/root/config/ > /dev/null; then
    echo -e "${GREEN}✓${NC} Healthy"
else
    echo -e "${RED}✗${NC} Unhealthy"
    exit 1
fi

# Check worker health
echo -n "Worker: "
if podman exec {{ authentik_worker_container_name }} /lifecycle/ak healthcheck > /dev/null 2>&1; then
    echo -e "${GREEN}✓${NC} Healthy"
else
    echo -e "${RED}✗${NC} Unhealthy"
    exit 1
fi

# Check database connection
echo -n "Database: "
if podman exec {{ authentik_server_container_name }} /lifecycle/ak dbcheck > /dev/null 2>&1; then
    echo -e "${GREEN}✓${NC} Connected"
else
    echo -e "${RED}✗${NC} Connection failed"
    exit 1
fi

# Check Redis connection
echo -n "Redis: "
if podman exec {{ authentik_server_container_name }} python -c "
import redis
r = redis.Redis(host='{{ authentik_redis_host }}', port={{ authentik_redis_port }})
r.ping()
" > /dev/null 2>&1; then
    echo -e "${GREEN}✓${NC} Connected"
else
    echo -e "${RED}✗${NC} Connection failed"
    exit 1
fi

{% if authentik_enable_metrics %}
# Check metrics endpoint
echo -n "Metrics: "
if curl -sf http://localhost:{{ authentik_metrics_port }}/metrics | head -n 1 | grep -q "# HELP"; then
    echo -e "${GREEN}✓${NC} Available"
else
    echo -e "${YELLOW}⚠${NC} Not available"
fi
{% endif %}

echo -e "\n${GREEN}All health checks passed!${NC}"
echo "Access Authentik at: {{ authentik_external_url }}"