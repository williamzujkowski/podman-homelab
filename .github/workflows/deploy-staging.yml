---
name: Deploy to Staging VMs

on:
  workflow_dispatch:
    inputs:
      playbook:
        description: 'Playbook to run'
        required: true
        default: '10-base.yml'
        type: choice
        options:
          - '00-bootstrap.yml'
          - '10-base.yml'
          - '20-podman.yml'
          - '30-observability.yml'
          - '40-ingress.yml'
          - '50-secrets-sso.yml'
      serial:
        description: 'Deployment serial (1 = one host at a time)'
        required: false
        default: '1'
      check_mode:
        description: 'Run in check mode (dry run)'
        required: false
        type: boolean
        default: false
  push:
    branches: [main]
    paths:
      - 'ansible/**'
      - 'quadlet/**'
      - '.github/workflows/deploy-staging.yml'

jobs:
  preflight:
    name: Preflight Checks
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Validate inputs
        run: |
          echo "Playbook: ${{ inputs.playbook || '10-base.yml' }}"
          echo "Serial: ${{ inputs.serial || '1' }}"
          echo "Check mode: ${{ inputs.check_mode || false }}"

  deploy:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: preflight
    environment:
      name: staging
      url: https://staging.homelab.local
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Connect to Tailscale (Optional)
        if: ${{ vars.TAILSCALE_ENABLED == 'true' }}
        uses: tailscale/github-action@v3
        with:
          oauth-client-id: ${{ secrets.TS_OAUTH_CLIENT_ID }}
          oauth-secret: ${{ secrets.TS_OAUTH_SECRET }}
          tags: tag:ci
          version: stable

      - name: Install Ansible
        run: |
          pip install --upgrade pip
          pip install ansible
          ansible-galaxy collection install containers.podman community.general ansible.posix

      - name: Set up SSH key
        env:
          SSH_PRIVATE_KEY: ${{ secrets.ANSIBLE_SSH_PRIVATE_KEY }}
        run: |
          mkdir -p ~/.ssh
          echo "$SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          cat >> ~/.ssh/config <<EOF
          Host vm-* *.local
            StrictHostKeyChecking no
            UserKnownHostsFile=/dev/null
            User ubuntu
            IdentityFile ~/.ssh/id_rsa
          EOF
          chmod 600 ~/.ssh/config

      - name: Test connectivity
        run: |
          ansible -i ansible/inventories/local/hosts.yml all -m ping || \
          echo "::warning::Could not reach all hosts, proceeding anyway"

      - name: Run preflight time check
        run: |
          ansible -i ansible/inventories/local/hosts.yml all \
            -m shell -a 'command -v chronyc && chronyc tracking || echo "Chrony not installed"' || true

      - name: Run playbook (check mode)
        if: ${{ inputs.check_mode == true || inputs.check_mode == 'true' }}
        run: |
          ansible-playbook \
            -i ansible/inventories/local/hosts.yml \
            ansible/playbooks/${{ inputs.playbook || '10-base.yml' }} \
            -e "serial=${{ inputs.serial || 1 }}" \
            --check --diff

      - name: Run playbook
        if: ${{ inputs.check_mode != true && inputs.check_mode != 'true' }}
        run: |
          ansible-playbook \
            -i ansible/inventories/local/hosts.yml \
            ansible/playbooks/${{ inputs.playbook || '10-base.yml' }} \
            -e "serial=${{ inputs.serial || 1 }}"

      - name: Verify services
        if: ${{ inputs.check_mode != true && inputs.check_mode != 'true' }}
        run: |
          if [ -f scripts/verify_services.sh ]; then
            ./scripts/verify_services.sh vm-a vm-b vm-c || \
            echo "::warning::Some services may not be healthy yet"
          fi
